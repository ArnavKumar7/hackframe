{"_type":"export","__export_format":4,"__export_date":"2023-04-01T07:46:43.102Z","__export_source":"insomnia.desktop.app:v2022.7.5","resources":[{"_id":"req_0c32c463edf64ce4a08853360277c439","parentId":"fld_ceadb570ba46427f9e79aae5e2161ec1","modified":1680335138497,"created":1675097897642,"url":"localhost:5001/checkin","name":"New Request","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"SRN\" : \"PES2UG20CS237\",\n\t\"Name\" : \"Navin\",\n\t\"Email\" : \"karupal2002@gmail.com\",\n\t\"Phone\" : \"8217703098\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1679175443392,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_ceadb570ba46427f9e79aae5e2161ec1","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1680335134367,"created":1680335134367,"name":"hackframe","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1680335134367,"_type":"request_group"},{"_id":"wrk_049a9c50f36c44e492c7b0a478ec2f51","parentId":null,"modified":1675097893975,"created":1675097893975,"name":"Main","description":"","scope":"collection","_type":"workspace"},{"_id":"req_ec6a220d59204195aa17295cddd96056","parentId":"fld_ceadb570ba46427f9e79aae5e2161ec1","modified":1680335140071,"created":1680329941785,"url":"localhost:5001/info","name":"New Request","description":"","method":"GET","body":{"mimeType":"application/json","text":"{\n\t\"Token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJTUk4iOiJQRVMyVUcyMENTMjM3IiwibmFtZSI6Ik5hdmluIiwidGVhbV9pZCI6IlRlc3RpbmdJZGlvdHMiLCJwaG9uZSI6ImthcnVwYWwyMDAyQGdtYWlsLmNvbSIsImVtYWlsIjoiODIxNzcwMzA5OCIsImlzcyI6InVzZXJzZXJ2aWNlIn0.EWaevUdzlOgQWyP_l3l7SVhuOCrnALLsag65Ab-hxtM\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1679175443342,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c330f26267e14e80be05e91c4d717640","parentId":"fld_ceadb570ba46427f9e79aae5e2161ec1","modified":1680335141647,"created":1680334696224,"url":"localhost:5001/attendevent","name":"New Request","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"Token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJTUk4iOiJQRVMyVUcyMENTMjM3IiwibmFtZSI6Ik5hdmluIiwidGVhbV9pZCI6IlRlc3RpbmdJZGlvdHMiLCJwaG9uZSI6ImthcnVwYWwyMDAyQGdtYWlsLmNvbSIsImVtYWlsIjoiODIxNzcwMzA5OCIsImlzcyI6InVzZXJzZXJ2aWNlIn0.EWaevUdzlOgQWyP_l3l7SVhuOCrnALLsag65Ab-hxtM\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1679175443292,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_4dbc387fbcf6a3cb548935b986170cca1bb808c1","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1675097893980,"created":1675097893980,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1675097893980,"_type":"environment"},{"_id":"jar_4dbc387fbcf6a3cb548935b986170cca1bb808c1","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1675097893983,"created":1675097893983,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_feec0de317ad441cb890029f9b9d7e5b","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1675097893976,"created":1675097893976,"fileName":"Main","contents":"","contentType":"yaml","_type":"api_spec"},{"_id":"pf_135652e2a0ce4fd9930e194132213f42","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1678015703161,"created":1678015703161,"name":"comparator_grpc.pb.go","protoText":"// Code generated by protoc-gen-go-grpc. DO NOT EDIT.\n// versions:\n// - protoc-gen-go-grpc v1.2.0\n// - protoc             v3.21.12\n// source: comparator.proto\n\npackage proto\n\nimport (\n\tcontext \"context\"\n\tgrpc \"google.golang.org/grpc\"\n\tcodes \"google.golang.org/grpc/codes\"\n\tstatus \"google.golang.org/grpc/status\"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\n// Requires gRPC-Go v1.32.0 or later.\nconst _ = grpc.SupportPackageIsVersion7\n\n// ComparatorClient is the client API for Comparator service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype ComparatorClient interface {\n\tCompareImages(ctx context.Context, in *ImageCompareRequest, opts ...grpc.CallOption) (*ImageCompareReply, error)\n}\n\ntype comparatorClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewComparatorClient(cc grpc.ClientConnInterface) ComparatorClient {\n\treturn &comparatorClient{cc}\n}\n\nfunc (c *comparatorClient) CompareImages(ctx context.Context, in *ImageCompareRequest, opts ...grpc.CallOption) (*ImageCompareReply, error) {\n\tout := new(ImageCompareReply)\n\terr := c.cc.Invoke(ctx, \"/comparator.Comparator/CompareImages\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// ComparatorServer is the server API for Comparator service.\n// All implementations must embed UnimplementedComparatorServer\n// for forward compatibility\ntype ComparatorServer interface {\n\tCompareImages(context.Context, *ImageCompareRequest) (*ImageCompareReply, error)\n\tmustEmbedUnimplementedComparatorServer()\n}\n\n// UnimplementedComparatorServer must be embedded to have forward compatible implementations.\ntype UnimplementedComparatorServer struct {\n}\n\nfunc (UnimplementedComparatorServer) CompareImages(context.Context, *ImageCompareRequest) (*ImageCompareReply, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method CompareImages not implemented\")\n}\nfunc (UnimplementedComparatorServer) mustEmbedUnimplementedComparatorServer() {}\n\n// UnsafeComparatorServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to ComparatorServer will\n// result in compilation errors.\ntype UnsafeComparatorServer interface {\n\tmustEmbedUnimplementedComparatorServer()\n}\n\nfunc RegisterComparatorServer(s grpc.ServiceRegistrar, srv ComparatorServer) {\n\ts.RegisterService(&Comparator_ServiceDesc, srv)\n}\n\nfunc _Comparator_CompareImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(ImageCompareRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(ComparatorServer).CompareImages(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/comparator.Comparator/CompareImages\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(ComparatorServer).CompareImages(ctx, req.(*ImageCompareRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// Comparator_ServiceDesc is the grpc.ServiceDesc for Comparator service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar Comparator_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"comparator.Comparator\",\n\tHandlerType: (*ComparatorServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"CompareImages\",\n\t\t\tHandler:    _Comparator_CompareImages_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"comparator.proto\",\n}\n\n// UserClient is the client API for User service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.\ntype UserClient interface {\n\tRegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterReply, error)\n}\n\ntype userClient struct {\n\tcc grpc.ClientConnInterface\n}\n\nfunc NewUserClient(cc grpc.ClientConnInterface) UserClient {\n\treturn &userClient{cc}\n}\n\nfunc (c *userClient) RegisterUser(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterReply, error) {\n\tout := new(UserRegisterReply)\n\terr := c.cc.Invoke(ctx, \"/comparator.User/RegisterUser\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n\n// UserServer is the server API for User service.\n// All implementations must embed UnimplementedUserServer\n// for forward compatibility\ntype UserServer interface {\n\tRegisterUser(context.Context, *UserRegisterRequest) (*UserRegisterReply, error)\n\tmustEmbedUnimplementedUserServer()\n}\n\n// UnimplementedUserServer must be embedded to have forward compatible implementations.\ntype UnimplementedUserServer struct {\n}\n\nfunc (UnimplementedUserServer) RegisterUser(context.Context, *UserRegisterRequest) (*UserRegisterReply, error) {\n\treturn nil, status.Errorf(codes.Unimplemented, \"method RegisterUser not implemented\")\n}\nfunc (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}\n\n// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.\n// Use of this interface is not recommended, as added methods to UserServer will\n// result in compilation errors.\ntype UnsafeUserServer interface {\n\tmustEmbedUnimplementedUserServer()\n}\n\nfunc RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {\n\ts.RegisterService(&User_ServiceDesc, srv)\n}\n\nfunc _User_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\tin := new(UserRegisterRequest)\n\tif err := dec(in); err != nil {\n\t\treturn nil, err\n\t}\n\tif interceptor == nil {\n\t\treturn srv.(UserServer).RegisterUser(ctx, in)\n\t}\n\tinfo := &grpc.UnaryServerInfo{\n\t\tServer:     srv,\n\t\tFullMethod: \"/comparator.User/RegisterUser\",\n\t}\n\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\treturn srv.(UserServer).RegisterUser(ctx, req.(*UserRegisterRequest))\n\t}\n\treturn interceptor(ctx, in, info, handler)\n}\n\n// User_ServiceDesc is the grpc.ServiceDesc for User service.\n// It's only intended for direct use with grpc.RegisterService,\n// and not to be introspected or modified (even as a copy)\nvar User_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"comparator.User\",\n\tHandlerType: (*UserServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"RegisterUser\",\n\t\t\tHandler:    _User_RegisterUser_Handler,\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"comparator.proto\",\n}\n","_type":"proto_file"},{"_id":"pd_263efff29642482388d1d3eaeb50c6c3","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1678014965347,"created":1678014965347,"name":"proto","_type":"proto_directory"},{"_id":"pd_17f16d6a77124750b79e819dc20f1e09","parentId":"wrk_049a9c50f36c44e492c7b0a478ec2f51","modified":1678015762239,"created":1678015762239,"name":"proto","_type":"proto_directory"},{"_id":"pf_25a91958f5ac4f59b86e315db7d4982a","parentId":"pd_263efff29642482388d1d3eaeb50c6c3","modified":1678014965345,"created":1678014965345,"name":"comparator.proto","protoText":"// Protobuf Definition for the Gorjus Services\nsyntax = \"proto3\";\npackage comparator;\n\noption go_package = \"github.com/anirudhRowjee/cssbatt_demux/proto\";\n\nservice Comparator {\n  rpc CompareImages(ImageCompareRequest) returns (ImageCompareReply) {}\n}\n\nmessage ImageCompareRequest {\n  string image1name = 1;\n  string image2name = 2;\n}\n\nmessage ImageCompareReply { float comparison_percentage = 1; }\n","_type":"proto_file"},{"_id":"pf_8a615d7d12494df0963a59854001f338","parentId":"pd_17f16d6a77124750b79e819dc20f1e09","modified":1678015762233,"created":1678015762233,"name":"comparator.proto","protoText":"// Protobuf Definition for the Gorjus Services\nsyntax = \"proto3\";\npackage comparator;\n\noption go_package = \"github.com/anirudhRowjee/cssbatt_demux/proto\";\n\nservice Comparator {\n  rpc CompareImages(ImageCompareRequest) returns (ImageCompareReply) {}\n}\nservice User{\n  rpc RegisterUser(UserRegisterRequest) returns (UserRegisterReply) {}\n}\n\nmessage UserRegisterRequest{\n   string username = 1;\n   string password = 2;\n}\nmessage UserRegisterReply{\n   string message = 1;\n}\n\nmessage ImageCompareRequest {\n  string image1name = 1;\n  string image2name = 2;\n}\n\nmessage ImageCompareReply { float comparison_percentage = 1; }\n","_type":"proto_file"}]}